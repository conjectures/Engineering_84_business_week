# AWS Playbook
---
- name: Creating EC2 Instances
  hosts: localhost
  connection: local
  vars_files:
    - group_vars/all/pass.yaml
  gather_facts: false

  tasks:
    - name: Get Info Block
      block:
        - name: Print debug info
          debug: msg="{{aws_access_key}}"

      tags: ['always', 'getinfoonly']

    - name: Provisioning Instances
      block:
        - name: Provision "{{item}}" 
          tags: create_ec2
          ec2:
            region: eu-west-1
            key_name: eng84devops
            aws_access_key: "{{aws_access_key}}"
            aws_secret_key: "{{aws_secret_key}}"
            # security group
            # group:
            instance_type: t2.micro
            image: ami-038d7b856fe7557b3
            wait: yes
            wait_timeout: 500
            count: 1
            instance_tags:
              Name: "{{item.name}}"
              os: ubuntu
              group: "{{item.groups}}"

            monitoring: no
            vpc_subnet_id: subnet-02c6d569a098d5e79
            assign_public_ip: yes
          register: ec2
          delegate_to: localhost
          loop:
            # - { name: 'eng84_alexis_controller', groups: 'control' }
            - { name: 'eng84_alexis_application', groups: 'application' }
            - { name: 'eng84_alexis_database', groups: 'database' }
          register: ec2
      tags: ['never', 'ec2-create']

    - name: Add Instances to Host Group
      add_host:
        hostname: "{{item.instances[0].public_ip}}"
        groupname: "{{item.instances[0].tags.group}}" 
      loop: "{{ec2.results}}"
      tags: ['never', 'ec2-create']

      #     - name: Add EC2 to Host key to known hosts
      #       connection: local
      #       shell: "ssh-keyscan -H {{item}} >> ~/.ssh/known_hosts"
      #       loop:
      #         # - control
      #         - application
      #         - database
      #       tags: ['never', 'ec2-create', 'ec2']

- name: Configure Database 
  hosts: application
  gather_facts: true
  become: true
  remote_user: ubuntu
  tasks:

    - name: Synchronise files between controller and agents
      ansible.posix.synchronize:
        src: /home/vagrant/application/environment/db
        dest: /home/ubuntu/
      # delegate_to: control
      tags: ['never', 'ec2-configure']

    - name: run provision file 
      shell: db/provision.sh >> somelog.txt
      tags: ['never', 'ec2-configure']


- name: Configure App
  hosts: application
  gather_facts: true
  become: true
  remote_user: ubuntu
  tasks:
    - name: Synchronise environment files
      ansible.posix.synchronize:
        src: /home/vagrant/application/environment/app
        dest: /home/ubuntu
      # delegate_to: control
      tags: ['never', 'ec2-configure']

    - name: Synchronise app files
      ansible.posix.synchronize:
        src: /home/vagrant/application/app
        dest: /home/ubuntu
      # delegate_to: control
      tags: ['never', 'ec2-configure']

    - name: run provision file 
      shell: app/provision.sh >> somelog.txt
      tags: ['never', 'ec2-configure']

      #     - name: install packages
      #       apt: pkg=nginx state=present
      #       delegate_to: application
      #       tags: ['never', 'ec2-configure']

